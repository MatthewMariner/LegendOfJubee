<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;
player_speed = 2;
timer = 0;
state = "IDLE";
facing = 0; // 0 - up, 1 - right, 2 - down, 3 - left;

iframes = 0;

hp = 24;
hp_containers = 3;
hp_max_containers = 16;

sprite_walk = spr_player_up;
sprite_attack = spr_player_attack_up;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anim_speed = 0.2;

switch(state) {
    case "ATTACK_SWORD_START": {
        image_speed = 0;
        vx = 0;
        vy = 0;
        timer = 15;
        sprite_index = sprite_attack;
        state = "ATTACK_SWORD";
        break;
    }
    case "ATTACK_SWORD": {
        if (timer == 8) {
            switch(facing) {
                case 0: {
                    with(instance_create(x, y-12, obj_sword) ) {
                        image_angle = 0;
                    }
                    break;
                }
                case 1: {
                    with(instance_create(x+12, y, obj_sword) ) {
                        image_angle = 270;
                    }
                    break;
                }
                case 2: {
                    with(instance_create(x, y+12, obj_sword) ) {
                        image_angle = 180;
                    }
                    break;
                }
                case 3: {
                    with(instance_create(x-12, y, obj_sword) ) {
                        image_angle = 90;
                    }
                    break;
                }
            }
        }
    
        if (timer &gt; 0) {
            timer -= 1;
        } else {
            state = "IDLE";
        }
        break;
    }
    case "IDLE": {
        image_speed = 0;
        sprite_index = sprite_walk;
        
        vx = 0;
        vy = 0;
        check_inputs_all();
        break;
    }
    case "UP": {
        facing = 0;
        image_speed = anim_speed;
        sprite_walk = spr_player_up;
        sprite_attack = spr_player_attack_up;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = align_to_grid(x, 8);
        vy = -1 * player_speed;
        
        check_inputs_all();
        break;
    }
    case "DOWN": {
        facing = 2;
        image_speed = anim_speed;
        sprite_walk = spr_player_down;
        sprite_attack = spr_player_attack_down;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = align_to_grid(x, 8);
        vy = player_speed;
        
        check_inputs_all();
        break;
    }
    case "LEFT": {
        facing = 3;
        image_speed = anim_speed;
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_attack_side;
        sprite_index = sprite_walk;
        
        image_xscale = 1;
        vx = -1 * player_speed;
        vy = align_to_grid(y, 8);
        
        check_inputs_all();
        break;
    }
    case "RIGHT": {
        facing = 1;
        image_speed = anim_speed;
        sprite_walk = spr_player_side;
        sprite_attack = spr_player_attack_side;
        sprite_index = sprite_walk;
        
        image_xscale = -1;
        vx = player_speed;
        vy = align_to_grid(y, 8);
        
        check_inputs_all();
        break;
    }
}

check_collision_obj(vx, vy, obj_solid);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// iframe timer
if (iframes &gt; 0) {
    iframes --;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_room_warp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(other.room_dest);
x = other.player_target_x;
y = other.player_target_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_par_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collide with enemy
if (iframes == 0) {
    iframes = 30;
    hp -= other.damage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart_container">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// add heart container
with (other) {
    other.hp_containers = clamp(other.hp_containers + 1, 0, other.hp_max_containers);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collide with hearts
with (other) {
    other.hp = clamp(other.hp + hp, 0, other.hp_containers*8);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (iframes &gt; 0 &amp;&amp; iframes mod 3 == 0) {
    
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
