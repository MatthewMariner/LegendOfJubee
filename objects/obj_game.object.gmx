<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_game();
//Initializes Variables For First Time
state_init();


menu_open = false;


scale = 4;
window_set_size(window_get_width() * scale, window_get_height() * scale);
window_set_position(200, 100);
// Need to Instantiate This Object So That Other Objects Can Call It
instance_create(0,0,Input);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /*
 *
 * This Object Event Manipulates the room and transitions from the first port (HUD) and second (MAP)
 *
 * @ht = height, @tgt = target, 'x' and 'y' correspond to their directions on the grid
 * @div func = division without remainder 
 *  {
 *      Since rooms are 256 wide - if you div by 256 the remainder = 0
 *      multiply 0 by 256 - which snaps X/Y coordinate to the top left of the room
 *  }
 */

 state_process(st_game_title);
 
 
 
 /*
switch(state) {

    case "IN_LEVEL": {
    // same with vertical view
    target_xview = (obj_player.x div 256) * 256;
    target_yview = (obj_player.y div 176) * 176;
    
    //Accesses move_toward() script
    view_xview[0] = move_toward(view_xview[0],target_xview,4);
    view_yview[0] = move_toward(view_yview[0],target_yview,4);
    
    if (Input.start) state = "MENU_TRANS";
    break;
    }
    case "MENU_TRANS": {
        m_speed = 2;
        hud_ht = 56;
        level_ht = 176;
        total_ht = hud_ht + level_ht;
        
        if (!menu_open) {
            hud_y_tgt = 0;
            hud_ht_tgt = total_ht;
            lvl_y_tgt = total_ht;
            lvl_ht_tgt = 0;
            
            if (view_hport[1] == total_ht) {
                menu_open = true;
                state = "IN_MENU";
            }
            
        } else {
            hud_y_tgt = level_ht;
            hud_ht_tgt = hud_ht;
            lvl_y_tgt = hud_ht;
            lvl_ht_tgt = level_ht;
            
            if (view_hport[1] == hud_ht) {
                menu_open = false;
                state = "IN_LEVEL";
            }
        }
        // Move_Toward() says 'Where are you now - where do you want to be - and how fast do you want to get there'
        //hud
        view_yview[1] = move_toward(view_yview[1], hud_y_tgt, m_speed);   
        view_hport[1] = move_toward(view_hport[1], hud_ht_tgt, m_speed);
        view_hview[1] = move_toward(view_hview[1], hud_ht_tgt, m_speed);
        
        //level 
        view_hview[0] = move_toward(view_hview[0], lvl_ht_tgt, m_speed);
        view_yport[0] = move_toward(view_yport[0], lvl_y_tgt, m_speed);
        view_hport[0] = total_ht - view_hport[1];  
        
        break;
    }
    case "IN_MENU": {
        if (Input.start) state = "MENU_TRANS";
        break;
    }

}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
